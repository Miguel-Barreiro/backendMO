message position {
    required double pos_x = 1;
    required double pos_y = 2;
};

message aim_event {
    enum aim_event_type {
        cue_rotated = 0;
        power_changed = 1;
        english_changed = 2;
        ball_dragged = 3;   
    }
    required aim_event_type type = 1;
    optional double angle = 2;
    optional double power = 3;
    optional position new_english = 4;
    optional int32 ball_index = 5;
    optional position new_ball_position = 6;
};

message aim_events {
    repeated aim_event events = 1;  
};

message ball_state {
    enum ball_state_enum {
        on_table = 0;
        in_ball_runner = 1;
        off_table = 2;
    }
    required int32 ball_number = 1;
    required ball_state_enum ball_state = 2;
    optional int32 ball_runner_index = 3;
    optional position ball_position = 4;
};

message table_state {
    enum state {
        unbroken = 0;
        open = 1;
        closed = 2;
    }
    required state rule_state = 1;
    required string stripes_player = 2;
    repeated ball_state balls = 3;
};

message shot_outcome {
    enum outcome_type {
        give_turn = 0;
        game_over = 1;
        turn_timeout = 2;
    }
    required outcome_type outcome = 1;
    optional string next_player = 2;
    optional string winner = 3;
    optional int32 next_turn_time = 4;
    required int32 shot_id = 5;
    optional table_state table = 6;
};

message balls_racked {
    required table_state table = 1; 
};

message shot_data {
    required string player = 1;
    required double angle = 2;
    required position english = 3;
    required double power = 4;  
    required table_state table = 5;
    required double max_power = 6;
    required double spin_factor = 7;
    repeated int32 powerup_used = 8;
    required int32 shot_id = 9;
};

message game_event {
    required int32 event_id = 1;
    repeated string parameters = 2; 
};

message animation_done {
    required shot_outcome outcome = 1;
    required table_state table = 2;
    repeated game_event events = 3;
    optional int32 legal_balls_potted = 4;
    required bool foul = 5;
    required int32 shot_id = 6;
};

message referee_request {
    required shot_data shot_data = 1;
    required string opponent = 2;
};

message referee_rack_request {
    required int32 random_seed = 1;
};

message aim_event_queue {
    repeated aim_event events = 1;  
};

message user_creation_info {
    required string email = 1;
    required string nickname = 2;
    required string password = 3;   
    required int32 birth_year = 4;
    required int32 birth_month = 5;
    required int32 birth_day = 6;
};

message create_session {
    enum authentication_realm {
        guest = 0;
        facebook = 1;
        miniclip = 2;
        miniclip_username_password = 3;
        create_miniclip_user = 4;
        miniclip_password_reminder = 5;
        miniclip_web_token = 6;
    }
    required authentication_realm realm = 1;
    required uint32 client_version = 2;
    optional string authentication_token = 3;
    optional string username = 4;
    optional string password = 5;
    optional string push_notification_token = 6;
    optional user_creation_info create_data = 7;
    required int32 platform = 8; // 0 - ios, 1 - google android
    optional string device_name = 9;
    optional string openuid = 10;
    optional string sha1_mac = 11;
};

message match_data {
    enum game_state {
        awaiting_players = 1;
        starting = 2;
        in_progress = 3;
        finished = 4;
    }
    required game_state state = 1;
    required int32 row = 2;
    required int32 column = 3;
    optional string player_a = 4;
    optional string player_a_display_name = 5;
    optional string player_b = 6;
    optional string player_b_display_name = 7;
    optional string winner = 8;
    optional game_event event_player_a = 9;
    optional game_event event_player_b = 10;
};

message tournament_state {
    required int32 size = 1;
    repeated match_data matches = 2;
};

message game_queue_data {
    enum game_type {
        normal_game = 1;
        tournament_game = 2;
    }
    required game_type type = 1;
    required int32 tier = 2;
    optional string opponent = 3;
    optional string opponent_name = 4;
    optional int32 opponent_rank = 5;
    optional tournament_state tournament = 6;
};

message daily_spin_bonus {
    required int32 prize = 1;   
    required int32 total_spins = 2;
};

message free_coins_bonus {
    required int32 elapsed_time = 1;
    required int32 total_time = 2;  
    required int32 amount = 3;
};

message game_metadata {
    enum game_type_t {
        normal = 1;
        tournament = 2;
    }
    enum tournament_progress_t {
        final = 1;
        semi_finals = 2;
        quarter_finals = 3;
        eighth_finals = 4;
    }
    required game_type_t type = 1;
    required int32 tier = 2;
    required int32 pot = 3;
    optional tournament_progress_t tournament_progress = 4;
    optional int32 player_win_count = 5;
    optional int32 opponent_win_count = 6;
    required int32 opponent_cue_id = 7;
};

message product_info {
    required int32 product_id = 1;
    required int32 quantity = 2;    
};

message tier_info {
    required int32 tier_id = 1;
    required int32 tier_population = 2;
}

message achievement_list {
    repeated int32 achievement_id = 1;
};

message product_list {
    repeated product_info product = 1;  
};

message tier_info_list {
    repeated tier_info tier = 1;    
};

message session_state {
    enum current_state {
        not_started = 1;
        waiting_game_starting = 2;
        waiting_rack = 3;
        waiting_player_shot = 4;        // last_table_state is populated
        waiting_player_result = 5;      // last_shot_data is populated
        waiting_opponent_shot = 6;      // last_table_state is populated
        waiting_shot_outcome = 7;       // last_table_state is populated
        waiting_game_started = 8;
    }
    required int32 latest_configuration = 1;
    required current_state state = 2;
    required string user_id = 3;
    required string user_display_name = 4;
    required int32 user_cash = 5;
    required int32 user_xp = 6;
    required int32 user_level = 7;
    optional animation_done last_table_state = 8; 
    optional shot_data last_shot_data = 9;
    optional int32 turn_time_left = 10;
    optional int32 total_player_control_time = 11;
    optional int32 total_opponent_control_time = 12;
    optional string opponent = 13;
    optional string opponent_name = 14;
    optional int32 opponent_rank = 15;
    optional game_queue_data wait_start = 16;
    optional string authentication_token = 17;
    optional daily_spin_bonus daily_spin_bonus_data = 18;
    optional game_metadata game_data = 19;
    required free_coins_bonus free_coins_bonus_data = 20;
    
    required int32 games_won = 21;
    required int32 tournaments_won = 22;
    required int32 total_legal_balls_potted = 23;
    required int32 win_streak = 24;
    
    optional int32 current_game_time = 25;
    
    required achievement_list achievements = 26;
    required product_list products = 27;
    required tier_info_list tier_population = 28;
    required int32 selected_cue = 29;
    required bool web_upgrade = 30;

    optional int32 total_turn_time = 31;
    required string miniclip_id = 32;
    optional int32 random_seed = 33;
};

message user_info_update {
    enum update_type_t {
        cash = 1;
        xp = 2;
        level = 3;
        product = 4;
        ads_reward_cash = 5;
    }
    required update_type_t update_type = 1;
    required int32 delta = 2;
    required int32 final = 3;
    optional int32 product_id = 4;
};

message enter_gamequeue {
    required int32 tier = 1;
    optional string opponent = 2;
    optional int32 tournament_size = 3;
    required int32 cue_id = 4;
    required bool is_rematch = 5;
};

message enter_gamequeue_result {
    enum result_type {
        success = 1;
        insufficent_funds = 2;
        nonexisting_opponent = 3;
    }
    required result_type enter_result = 1;
    repeated user_info_update update_data = 2;
};

message game_starting {
    required string opponent = 1;
    required string opponent_name = 2;
    required int32 opponent_rank = 3;
    required game_metadata metadata = 4;
    required int32 random_seed = 5;
};

message game_started {
   required string starting_player = 1;
   optional table_state table = 2;
};

message game_ended {
    enum game_ended_type {
        normal = 1;
        opponent_disconnected = 2;
        result_mismatch = 3;
    }
    required game_ended_type type = 1;
    repeated user_info_update update_data = 2;
};

message disconnect {
    enum disconnect_reason {
        // System errors
        network_error = 1;
        relogin_elsewhere = 2;
        incorrect_login = 3;
        incompatible_client = 4;
        game_crashed = 5;
        maintenance = 6;
        not_authorized = 7;
        database_issue = 8;

        // Errors returned when creating new user
        duplicate_nickname = 100;
        duplicate_email = 101;
        invalid_password = 102;
        invalid_date = 103;
        invalid_nickname = 104;

        // Errors when fetching password
        pw_reminder_sent = 200;
        pw_reminder_invalid_user = 201;
    };
    required disconnect_reason reason = 1;
    required bool retry_sensible = 2;
};

message ping {
    enum ping_type {
        shallow = 0;
        deep = 1;
    }
    required int32 id = 1;
    required ping_type type = 2;
    optional int32 roundtrip = 3;
};

message pang {
    required int32 id = 1;  
};

message user_data_type {
    required string user_id = 1;
    required string display_name = 2;
    required int32 rank = 3;
    required int32 games_played = 4;
    required int32 games_won = 5;
    required int32 tournaments_played = 6;
    required int32 tournaments_won = 7;
    required string country_code = 8;
    required int32 total_winnings = 9;
    required int32 tournament_winnings = 10;
    required int32 total_time_played = 11;
    required int32 total_legal_balls_potted = 12;
    required int32 win_streak = 13;
};

message user_info_result {
    enum result_type {
        success = 1;
        failure = 2;
    }
    required result_type request_result = 1;
    optional user_data_type user_data = 2;
};

message tuple {
    required string key = 1;
    required string value = 2;
};

message configuration_changed {
    required int32 new_configuration_version = 1;
    repeated tuple configuration_changes = 2;
};

message invite {
    required string opponent = 1;
    required int32 tier = 2;    
};

message invite_declined {
    required string opponent = 1;
    required string opponent_name = 2;
    required bool is_rematch = 3;
};

message match_request {
    required string opponent = 1;
    required string opponent_name = 2;
    required int32 tier = 3;
    required bool is_rematch = 4;
};

message decline_match_request {
    required string opponent = 1;
    required bool is_rematch = 2;
};

message friend_info {
    required string user_id = 1;
    optional string facebook_id = 2;
    required string display_name = 3;
    required int32 rank = 4;
    required int32 total_winnings = 5;
};

message get_friend_response {
    repeated friend_info friends = 1;
};

message chat_message_request {
    required string user_id_to = 1;
    required int32 message_type = 2;
};

message chat_message_notification {
    required string user_id_from = 1;
    required int32 message_type = 2;
};

message collect_free_coins_response {
    required free_coins_bonus next_bonus = 1;
    optional user_info_update update = 2;
};

message transaction_validate_request {
    required uint64 transaction_id = 2;
    required string receipt = 3;
    optional string signature = 4;
};

message transaction_validate_response {
    enum result_type {
        success = 1;
        invalid = 2;
        transient = 3;
    }
    required uint64 transaction_id = 1;
    required result_type request_result = 2;
    repeated user_info_update update_data = 3;
};

message purchase_product_request {
    required int32 product_id = 1;
    required int32 quantity = 2;    
};

message purchase_product_response {
    enum result_type {
        success = 1;
        insufficent_funds = 2;
        invalid_product = 3;
        transient_error = 4;
    }
    required result_type request_result = 1;
    required int32 product_id = 2;
    optional int32 final_product_quantity = 3;
    optional int32 final_coins_quantity = 4;
};

message upgrade_guest_request {
    optional user_creation_info upgrade_info = 1;
    optional string facebook_token = 2;
};

message upgrade_guest_response {
    enum result_type {
        success = 1;
        not_eligible = 2;
        duplicate_nickname = 3;
        duplicate_email = 4;
        invalid_password = 5;
        invalid_date = 6;
        invalid_nickname = 7;
        invalid_email = 8;
    }
    required result_type request_result = 1;
};

message user_result {
    required string user_id = 1;
    required string display_name = 2;
    required string miniclip_id = 3;
    required uint32 level = 4;
    required uint32 winnings = 5; 
};

message search_user_result {
    repeated user_result results = 1;  
};

message daily_spin_response {
    enum result_type {
        success = 1;
        not_eligible = 2;
    }
    required result_type spin_result = 1;
    optional uint32 spins_left = 2;
    optional user_info_update update = 3;
};

message offline_game {
    enum offline_game_type {
        hotseat = 1;
        quickfire = 2;
    }
    required offline_game_type type = 1;
    required uint32 amount = 2;
};

message offline_game_debit {
    repeated offline_game games = 1;
};

message req {
    enum message_type {
        create_session_t = 1;
        session_state_t = 2;
        entergamequeue_t = 3;
        leavegamequeue_t = 4;
        game_starting_t = 5;
        game_started_t = 6;
        game_ended_t = 7;
        disconnect_t = 8;

        balls_racked_t = 10;
        shot_taken_t = 11;
        animate_shot_t = 12;
        animation_done_t = 13;
        aim_events_t = 14;
        shot_outcome_t = 15;
        ping_t = 16;
        pang_t = 17;
        quit_game_t = 18;
        game_queue_data_t = 19;

        user_info_request_t = 21;
        user_info_result_t = 22;

        configuration_changed_t = 23;
        enter_gamequeue_result_t = 24;

        tournament_event_t = 25; 
        invite_t = 26;
        match_request_t = 27;

        get_friend_request_t = 29;
        get_friend_response_t = 30;
        add_friend_t = 31;
        
        chat_message_request_t = 32;
        chat_message_notification_t = 33;

        user_info_update_t = 34;

        collect_free_coins_request_t = 35;
        collect_free_coins_response_t = 36;

        validate_transaction_request_t = 37;
        validate_transaction_response_t = 38;

        new_achievements_t = 39;

        purchase_product_request_t = 40;
        purchase_product_response_t = 41;

        upgrade_guest_request_t = 42;
        upgrade_guest_response_t = 43;

        invite_declined_t = 44;
        decline_match_request_t = 45;

        nonce_request_t = 46;
        nonce_response_t = 47;

        set_selected_cue_t = 48;

        search_user_t = 49;
        search_user_result_t = 50;

        daily_spin_request_t = 52;
        daily_spin_response_t = 53;

        offline_game_debit_t = 54;

        referee_request_t = 55;
        referee_response_t = 56;

        referee_rack_request_t = 57;
        referee_rack_response_t = 58;
        delete_friend_t = 59;
    }
    required message_type type = 1;

    optional create_session create_session_field = 2;
    optional session_state session_state_field = 3;
    optional enter_gamequeue entergamequeue_field = 4;
    optional game_starting game_starting_field = 5;
    optional game_ended game_ended_field = 6;
    optional disconnect disconnect_field = 7;
    optional balls_racked balls_racked_field = 8;
    optional shot_data shot_taken_field = 9;
    optional shot_data animate_shot_field = 10;
    optional aim_events aim_events_field = 11;
    optional animation_done animation_done_field = 12;
    optional shot_outcome shot_outcome_field = 13;
    optional ping ping_field = 14;
    optional pang pang_field = 15;
    optional game_queue_data queue_data = 16;
    optional string user_info_request_data = 18;
    optional user_info_result user_info_result_data = 19;
    optional configuration_changed configuration_changed_data = 20;
    optional enter_gamequeue_result enter_gamequeue_result_data = 21;
    optional match_data tournament_event_data = 22;
    optional invite invite_data = 23;
    optional match_request match_request_data = 24;
    optional get_friend_response get_friend_response_data = 25;
    optional string add_friend_data = 26;
    optional chat_message_request chat_message_request_data = 27;
    optional chat_message_notification chat_message_notification_data = 28;
    optional user_info_update user_info_update_data = 29;
    optional collect_free_coins_response collect_free_coins_response_data = 30;
    optional transaction_validate_request transaction_validate_request_data = 31;
    optional transaction_validate_response transaction_validate_response_data = 32;
    optional achievement_list new_achievements_data = 33;
    optional purchase_product_request purchase_product_request_data = 34;
    optional purchase_product_response purchase_product_response_data = 35;
    optional upgrade_guest_request upgrade_guest_request_data = 36;
    optional upgrade_guest_response upgrade_guest_response_data = 37;
    optional invite_declined invite_declined_data = 38;
    optional decline_match_request decline_match_request_data = 39;
    optional uint64 nonce_response = 40;
    optional int32 selected_cue = 41;
    optional string search_user_term = 42;
    optional search_user_result search_user_result_data = 43;
    optional daily_spin_response daily_spin_response_data = 45;
    optional offline_game_debit offline_game_debit_data = 47;

    optional referee_request referee_request_data = 48;
    optional animation_done referee_response_data = 49;
   
    optional referee_rack_request referee_rack_request_data = 51;
    optional balls_racked referee_rack_response_data = 52;
    optional game_started game_started_data = 53;
    
    optional string delete_friend_data = 54;
};

message envelope {
    enum content_type {
        uncompressed_req_t = 0;
        compressed_req_t = 1;
    }
    required content_type type = 1;
    optional req uncompressed = 2;
    optional bytes compressed = 3;
    optional int32 uncompressed_size = 4;
};

